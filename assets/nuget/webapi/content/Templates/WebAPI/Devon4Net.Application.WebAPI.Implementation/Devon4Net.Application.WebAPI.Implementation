<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Devon4Net.Application.WebAPI.Implementation</name>
    </assembly>
    <members>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController">
            <summary>
            Ansible Tower Controller
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.#ctor(Devon4Net.Infrastructure.AnsibleTower.Handler.IAnsibleTowerHandler)">
            <summary>
            Ansible Tower Controller constructor
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.Ping">
            <summary>
            Ping Ansible Tower
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.Login(System.String,System.String)">
            <summary>
            Performs the basic Ansible Tower login
            </summary>
            <param name="user">User name</param>
            <param name="password">User password</param>
            <returns>The Ansible Tower login object result</returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.Applications(System.String)">
            <summary>
            Gets the list of applications
            </summary>
            <param name="authenticationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.Applications(Devon4Net.Infrastructure.AnsibleTower.Dto.Applications.ApplicationsRequestDto,System.String)">
            <summary>
            Creates an application
            </summary>
            <param name="applicationsRequest"></param>
            <param name="authenticationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.Organizations(System.String,System.String)">
            <summary>
            Gets the organizations list 
            Please check the OrganizationRolesConst and OrganizationRelatedLinksConst classes
            </summary>
            <param name="authenticationToken"></param>
            <param name="searchCriteria"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.GetOrganization(System.String,System.String)">
            <summary>
            Gets the organization given the organization identifier
            Please check the OrganizationRolesConst and OrganizationRelatedLinksConst classes
            </summary>
            <param name="authenticationToken"></param>
            <param name="organizationId"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.PostOrganization(System.String,Devon4Net.Infrastructure.AnsibleTower.Dto.Organizations.CreateOrganizationRequestDto)">
            <summary>
            Creates an organization
            Please check the OrganizationRolesConst and OrganizationRelatedLinksConst classes
            </summary>
            <param name="authenticationToken"></param>
            <param name="organizationRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.Inventories(System.String)">
            <summary>
            Gets the list of inventories
            </summary>
            <param name="authenticationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.Inventories(System.String,System.String)">
            <summary>
            Gets the inventory by the provided inventory Id
            </summary>
            <param name="authenticationToken"></param>
            <param name="inventoryId"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.Inventories(System.String,Devon4Net.Infrastructure.AnsibleTower.Dto.Inventories.CreateInventoryRequestDto)">
            <summary>
            Creates tan inventory
            </summary>
            <param name="authenticationToken"></param>
            <param name="inventoryRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.JobTemplates(System.String)">
            <summary>
            Gets the list of Job Templates
            </summary>
            <param name="authenticationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.JobTemplates(System.String,System.String)">
            <summary>
            Gets a Job Templates by the provided template job id
            </summary>
            <param name="authenticationToken"></param>
            <param name="jobTemplateId"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.JobTemplates(System.String,Devon4Net.Infrastructure.AnsibleTower.Dto.JobTemplates.CreateJobTemplateRequestDto)">
            <summary>
            Creates a Job Template
            </summary>
            <param name="authenticationToken"></param>
            <param name="createJobTemplateRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.Credentials(System.String,System.String)">
            <summary>
            Gets the credentials list 
            </summary>
            <param name="authenticationToken"></param>
            <param name="searchCriteria"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.Credentials(System.String,Devon4Net.Infrastructure.AnsibleTower.Dto.Credentials.CreateCredentialRequestDto)">
            <summary>
            Creates a credential 
            </summary>
            <param name="authenticationToken"></param>
            <param name="createCredentialRequest">Please check the input params. Inputs sample: url (CyberArk cojur), api_key, account, username, cacert</param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.Projects(System.String,System.String)">
            <summary>
            Gets the projects list 
            </summary>
            <param name="authenticationToken"></param>
            <param name="searchCriteria"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.Projects(System.String,Devon4Net.Infrastructure.AnsibleTower.Dto.Projects.CreateProjectRequestDto)">
            <summary>
            Creates a project
            </summary>
            <param name="authenticationToken"></param>
            <param name="createCredentialRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.DeleteProject(System.String,System.String)">
            <summary>
            Deletes a project by its Id
            </summary>
            <param name="projectId"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.Jobs(System.String,System.String)">
            <summary>
            Gets the list of Job Templates
            </summary>
            <param name="authenticationToken"></param>
            <param name="searchCriteria"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.AskJobCancel(System.String,System.Int32)">
            <summary>
            Returns if a Job can be canceled
            </summary>
            <param name="authenticationToken"></param>
            <param name="idJob"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.JobCancel(System.String,System.Int32)">
            <summary>
            Cancels a job
            </summary>
            <param name="authenticationToken"></param>
            <param name="idJob"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.JobEvents(System.String,System.Int32)">
            <summary>
            Gets the event list of a Job 
            </summary>
            <param name="authenticationToken"></param>
            <param name="idJob"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.JobSchedule(System.String,System.Int32)">
            <summary>
            Gets the event list of a Job 
            </summary>
            <param name="authenticationToken"></param>
            <param name="idJob"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.DeleteJobTemplate(System.String,System.String)">
            <summary>
            Gets the job templates
            </summary>
            <param name="authenticationToken"></param>
            <param name="jobtemplateId"></param>
            <returns>if the template has been deleted</returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AnsibleTowerManagement.Controllers.AnsibleTowerController.FullFlow(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs a regular Ansible Tower workflow.
            </summary>
            <param name="ansibleUser"></param>
            <param name="ansiblePassword"></param>
            <param name="organizationName"></param>
            <param name="credentialName"></param>
            <param name="credentialDescription"></param>
            <param name="credentialUserName"></param>
            <param name="credentialPassword"></param>
            <param name="idOrganization"></param>
            <param name="idCredentialType"></param>
            <param name="idUser"></param>
            <returns>Something</returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.AntiForgeryTokenManagement.Controllers.AntiForgeryTokenController">
            <summary>
            TODOs controller
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AntiForgeryTokenManagement.Controllers.AntiForgeryTokenController.#ctor(Microsoft.AspNetCore.Antiforgery.IAntiforgery)">
            <summary>
            Constructor
            </summary>
            <param name="todoService"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AntiForgeryTokenManagement.Controllers.AntiForgeryTokenController.Token">
            <summary>
            Gets the antiforgery token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AntiForgeryTokenManagement.Controllers.AntiForgeryTokenController.HelloSecured">
            <summary>
            Gets the secured string result
            </summary>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Controllers.AuthController">
            <summary>
            Auth controller sample.
            Please remember to avoid the use ob logic in a controller !!!
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Controllers.AuthController.#ctor(Devon4Net.Infrastructure.JWT.Handlers.IJwtHandler)">
            <summary>
            Constructor with DI
            </summary>
            <param name="jwtHandler"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Controllers.AuthController.Login(System.String,System.String)">
            <summary>
            Performs the login proces via the user/password flow
            This is only a sample. Please avoid any logic on the controller.
            </summary>
            <returns>LoginResponse class will provide the JWT token to securize the server calls</returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Controllers.AuthController.CurrentUser">
            <summary>
            Provides the information related to the logged user
            This is only a sample. Please never put any logic on a controller
            </summary>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CorporateBasicInfo">
            <summary>
            CorporateBasicInfo definition
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CorporateBasicInfo.Id">
            <summary>
            the identifier
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CorporateBasicInfo.Value">
            <summary>
            the provided value
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse">
            <summary>
            CurrentUserResponse definition
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.UserName">
            <summary>
            UserName
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.FirstName">
            <summary>
            FirstName
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.LastName">
            <summary>
            LastName
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.CorporateInfo">
            <summary>
            List of claims
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.LoginResponse">
            <summary>
            LoginResponse
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.LoginResponse.Token">
            <summary>
            Token
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.CyberArkManagement.CyberArkController.CreateUserGroup(Devon4Net.Infrastructure.CyberArk.Dto.Group.CreateGroupRequestDto,System.String)">
            <summary>
            This method is only available in version 11+
            </summary>
            <param name="createGroupRequest"></param>
            <param name="authToken"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Controllers.EmployeeController">
            <summary>
            Employees controller
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Controllers.EmployeeController.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.IEmployeeService)">
            <summary>
            Constructor
            </summary>
            <param name="employeeService"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Controllers.EmployeeController.GetEmployee">
            <summary>
            Gets the entire list of employees
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Controllers.EmployeeController.Create(Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Dto.EmployeeDto)">
            <summary>
            Creates an employee
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Controllers.EmployeeController.Delete(System.Int64)">
            <summary>
            Deletes the employee provided the id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Controllers.EmployeeController.ModifyEmployee(Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Dto.EmployeeDto)">
            <summary>
            Modifies the done status of the employee provided the data of the employee
            In this sample, all the data fields are mandatory
            </summary>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Converters.EmployeeConverter">
            <summary>
            TodoConverter
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Converters.EmployeeConverter.ModelToDto(Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Employee)">
            <summary>
            ModelToDto TODO transformation
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Dto.EmployeeDto">
            <summary>
            Employee definition
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Dto.EmployeeDto.Id">
            <summary>
            the Id
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Dto.EmployeeDto.Name">
            <summary>
            the Name
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Dto.EmployeeDto.Surname">
            <summary>
            the Surname
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Dto.EmployeeDto.Mail">
            <summary>
            the Mail
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException">
            <summary>
            Custom exception EmployeeNotFoundException
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException.StatusCode">
            <summary>
            The forced http status code to be fired on the exception manager
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException.ShowMessage">
            <summary>
            Show the message on the response?
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Exceptions.EmployeeNotFoundException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.EmployeeService">
            <summary>
            Employee service implementation
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.EmployeeService.#ctor(Devon4Net.Domain.UnitOfWork.UnitOfWork.IUnitOfWork{Devon4Net.Application.WebAPI.Implementation.Domain.Database.EmployeeContext})">
            <summary>
            Constructor
            </summary>
            <param name="uoW"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.EmployeeService.GetEmployee(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Employee,System.Boolean}})">
            <summary>
            Gets the Employee
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.EmployeeService.GetEmployeeById(System.Int64)">
            <summary>
            Gets the Employee by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.EmployeeService.CreateEmployee(System.String,System.String,System.String)">
            <summary>
            Creates the Employee
            </summary>
            <param name="name"></param>
            <param name="surName"></param>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.EmployeeService.DeleteEmployeeById(System.Int64)">
            <summary>
            Deletes the Employee by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.EmployeeService.ModifyEmployeeById(System.Int64,System.String,System.String,System.String)">
            <summary>
            Modifies te state of the Employee by id
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="surName"></param>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.IEmployeeService">
            <summary>
            IEmployeeService
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.IEmployeeService.GetEmployee(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Employee,System.Boolean}})">
            <summary>
            GetEmployee
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.IEmployeeService.GetEmployeeById(System.Int64)">
            <summary>
            GetEmployeeById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.IEmployeeService.CreateEmployee(System.String,System.String,System.String)">
            <summary>
            CreateEmployee
            </summary>
            <param name="name"></param>
            <param name="surName"></param>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.IEmployeeService.DeleteEmployeeById(System.Int64)">
            <summary>
            DeleteEmployeeById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.EmployeeManagement.Service.IEmployeeService.ModifyEmployeeById(System.Int64,System.String,System.String,System.String)">
            <summary>
            ModifyEmployeeById
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="surName"></param>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Commands.CreateTodoCommand">
            <summary>
            THe command to create a TO-DO
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Commands.CreateTodoCommand.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Commands.CreateTodoCommand.#ctor(System.String)">
            <summary>
            Constructor of the query 
            </summary>
            <param name="description"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Controllers.MediatRController">
            <summary>
            Controller sample to implement the mediator pattern
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Controllers.MediatRController.#ctor(Devon4Net.Infrastructure.MediatR.Handler.IMediatRHandler)">
            <summary>
            Mediator sample controller
            </summary>
            <param name="mediatRHandler"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Controllers.MediatRController.GetTodoById(System.Int64)">
            <summary>
            Gets a TO-DO item given the Id via CQRS pattern via a MediatR query
            </summary>
            <param name="todoId"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Controllers.MediatRController.CreateTodo(System.String)">
            <summary>
            Creates a TO-DO item sending a MediatR via a message command
            </summary>
            <param name="todoDescription">The description of the TO-DO command. It cannot be empty</param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Dto.TodoResultDto">
            <summary>
            TodoDto definition
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Dto.TodoResultDto.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Dto.TodoResultDto.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Dto.TodoResultDto.Done">
            <summary>
            Done
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException">
            <summary>
            Custom exception TodoNotFoundException
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException.StatusCode">
            <summary>
            The forced http status code to be fired on the exception manager
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException.ShowMessage">
            <summary>
            Show the message on the response?
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Handlers.GetTodoHandler.HandleAction(Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Queries.GetTodoQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the received message to perform the query
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Queries.GetTodoQuery.#ctor(System.Int64)">
            <summary>
            Constructor of the query 
            </summary>
            <param name="todoId"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Commands.TodoCommand">
            <summary>
            TO-DO command creation via RabbitMq
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Commands.TodoCommand.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Controllers.RabbitMqController">
            <summary>
            Controller sample to show how RabbitMq works
            Please setup your RabbitMq server in the configuration file
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Controllers.RabbitMqController.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Handlers.TodoRabbitMqHandler,Microsoft.Extensions.Options.IOptions{Devon4Net.Infrastructure.Common.Options.RabbitMq.RabbitMqOptions})">
            <summary>
            Class constructor
            </summary>
            <param name="todoRabbitMqHandler">The main handler injected via DI</param>
            <param name="rabbitMqOptions">The RabbitMq options to check if there is any instance set up</param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Controllers.RabbitMqController.CreateTodo(System.String)">
            <summary>
            Creates a TO-DO command sending a RabbitMq message
            </summary>
            <param name="todoDescription">The description of the TO-DO command. It cannot be empty</param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.SmaxHcmrManagement.Controllers.SmaxHcmController.CreateOffering(Devon4Net.Infrastructure.SmaxHcm.Dto.Offering.CreateOfferingRequestDto)">
            <summary>
            sample: { "NumOfRequests":0, "IsPopularity":false, "Service":"11427", "RequireAssetInfo":"InfrastructurePeripheral", "DisplayLabel":"New offering from SMAX UI", "IsBundle":true, "IsDefault":true, "Description":"<p>New offering from SMAX UI Description</p>"}
            </summary>
            <param name="createNewRequestDto"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.SmaxHcmrManagement.Controllers.SmaxHcmController.AddAgregatedOffering(Devon4Net.Infrastructure.SmaxHcm.Dto.Offering.AddAgregatedOfferingDto)">
            <summary>
            sample: {"providerId":"11526","offeringId":"d18ae624-d68c-4dd5-b0f6-53c8cba1cb38","service":"12736","offeringDisplayName":"Capgemini Test Design"}
            </summary>
            <param name="addAgregatedOfferingDto"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.SmaxHcmrManagement.Controllers.SmaxHcmController.CreateRequest(Devon4Net.Infrastructure.SmaxHcm.Dto.Request.CreateRequest.CreateRequestPropertiesDto)">
            <summary>
            sample: { "impactScope": "Enterprise", "urgency": "NoDisruption", "requestedByPerson": "10016", "requestsOffering": "11428", "displayLabel": "Request from .net API", "description": "This is a request created from .NET API", "userOptions": "", "dataDomains": [ "string" ], "startDate": "2020-08-20T07:28:37.890Z", "endDate": "2020-08-21T07:28:37.890Z", "requestAttachments": "{\"complexTypeProperties\":[]}" } 
            </summary>
            <param name="createNewRequestDto"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.SmaxHcmrManagement.Controllers.SmaxHcmController.CreateDesignContainer(Devon4Net.Infrastructure.SmaxHcm.Dto.Designer.CreateDesignContainer.CreateDesignContainerDto)">
            <summary>
            Sample: {"name":"Test Create Design BE","description":"Test Create Design BE desc","icon":"/903361753/dnd/api/blobstore/amazon_ec2.png?tag=library","tags":["/903361753/dnd/api/tag/8a809efe73146d590173147414bd05e1"]}
            </summary>
            <param name="createDesignContainerDto"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.SmaxHcmrManagement.Controllers.SmaxHcmController.CreateDesignVersion(Devon4Net.Infrastructure.SmaxHcm.Dto.Designer.CreateDesignVersion.CreateDesignVersionDto)">
            <summary>
            Sample: {"containerId":"8a808a9c73d970f80173e2fa990b1590","description":"Version description","icon":"/903361753/dnd/api/blobstore/amazon_ec2.png?tag=library","name":"Version name","published":false,"url":"","version":"1.0.0"}
            </summary>
            <param name="createDesignVersionDto"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.SmaxHcmrManagement.Controllers.SmaxHcmController.CreateComponentsAndRelations(System.String,Devon4Net.Infrastructure.SmaxHcm.Dto.Designer.ServiceDesigner.CreateComponentsAndRelations.CreateComponentsAndRelationsDto)">
            <summary>
            Sample: {"nodes":[{"name":"Test Capgemini server group","displayName":"Test Capgemini server group","description":"Test Capgemini server group description","icon":"/903361753/dnd/api/blobstore/server_group.png?tag=library","orderIndex":1,"typeId":"8a808a9c73d970f80173e345c3ba1811","x":11,"y":80},{"name":"Test Capgemini AWS server","displayName":"Test Capgemini AWS server","description":"Test Capgemini AWS server description","icon":"/903361753/dnd/api/blobstore/amazon_ec2.png?tag=library","orderIndex":1,"typeId":"8a808a9c73d970f80173e36043c61868","x":511,"y":80}],"relationships":[{"name":"Relationship test","displayName":"Child","relationshipTypeId":"8a808a9c73d970f80173e3d42c931cd0","sourceName":"Test Capgemini server group","targetName":"Test Capgemini AWS server"}]}
            </summary>
            <param name="versionId"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController">
            <summary>
            TODOs controller
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService)">
            <summary>
            Constructor
            </summary>
            <param name="todoService"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController.GetTodo">
            <summary>
            Gets the entire list of TODOS
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController.Create(System.String)">
            <summary>
            Creates the TODO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController.Delete(System.Int64)">
            <summary>
            Deletes the TODO provided the id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController.ModifyTodo(System.Int64)">
            <summary>
            Modifies the done status of the TODO provided the id
            </summary>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Converters.TodoConverter">
            <summary>
            TodoConverter
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Converters.TodoConverter.ModelToDto(Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos)">
            <summary>
            ModelToDto TODO transformation
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Dto.TodoDto">
            <summary>
            TodoDto definition
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Dto.TodoDto.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Dto.TodoDto.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Dto.TodoDto.Done">
            <summary>
            Done
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService">
            <summary>
            TodoService interface
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService.GetTodo(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos,System.Boolean}})">
            <summary>
            GetTodo
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService.GetTodoById(System.Int64)">
            <summary>
            GetTodoById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService.CreateTodo(System.String)">
            <summary>
            CreateTodo
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService.DeleteTodoById(System.Int64)">
            <summary>
            DeleteTodoById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService.ModifyTodoById(System.Int64)">
            <summary>
            ModifyTodoById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.TodoService">
            <summary>
            TODO service implementation
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.#ctor(Devon4Net.Domain.UnitOfWork.UnitOfWork.IUnitOfWork{Devon4Net.Application.WebAPI.Implementation.Domain.Database.TodoContext})">
            <summary>
            Constructor
            </summary>
            <param name="uoW"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.GetTodo(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos,System.Boolean}})">
            <summary>
            Gets the TODO
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.GetTodoById(System.Int64)">
            <summary>
            Gets the TODO by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.CreateTodo(System.String)">
            <summary>
            Creates the TODO
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.DeleteTodoById(System.Int64)">
            <summary>
            Deletes the TODO by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.ModifyTodoById(System.Int64)">
            <summary>
            Modifies te state of the TODO by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Configuration.DevonConfiguration.SetupDevonDependencyInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Sets up the service dependency injection
            For example:
            services.AddTransient"ITodoService, TodoService"();
            services.AddTransient"ITodoRepository, TodoRepository"();
            Put your DI declarations here
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Configuration.DevonConfiguration.SetupDatabase(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Setup here your database connections.
            To use RabbitMq message backup declare the 'RabbitMqBackupContext' database setup
            PE: services.SetupDatabase&lt;RabbitMqBackupContext&gt;($"Data Source={FileOperations.GetFileFullPath("RabbitMqBackupSqLite.db")}", DatabaseType.Sqlite);
            Please add the connection strings to enable the backup messaging for MediatR abd RabbitMq using MediatRBackupContext and RabbitMqBackupContext
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.EmployeeRepository">
            <summary>
            Repository implementation for the Employee
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.EmployeeRepository.#ctor(Devon4Net.Application.WebAPI.Implementation.Domain.Database.EmployeeContext)">
            <summary>
            Constructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.EmployeeRepository.GetEmployee(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Employee,System.Boolean}})">
            <summary>
            Get TODO method
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.EmployeeRepository.GetEmployeeById(System.Int64)">
            <summary>
            Gets the TODO by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.EmployeeRepository.Create(System.String,System.String,System.String)">
            <summary>
            Creates the TODO
            </summary>
            <param name="name"></param>
            <param name="surName"></param>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.EmployeeRepository.DeleteEmployeeById(System.Int64)">
            <summary>
            Deletes the TODO by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.TodoRepository">
            <summary>
            Repository implementation for the TODOS
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.TodoRepository.#ctor(Devon4Net.Application.WebAPI.Implementation.Domain.Database.TodoContext,Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Validators.TodosFluentValidator)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="todosValidator"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.TodoRepository.GetTodo(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos,System.Boolean}})">
            <summary>
            Get TODO method
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.TodoRepository.GetTodoById(System.Int64)">
            <summary>
            Geto the TODO by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.TodoRepository.Create(System.String)">
            <summary>
            Creates the TODO
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.TodoRepository.DeleteTodoById(System.Int64)">
            <summary>
            Deletes the TODO by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Domain.Database.EmployeeContext">
            <summary>
            Employee database context definition
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.Database.EmployeeContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{Devon4Net.Application.WebAPI.Implementation.Domain.Database.EmployeeContext})">
            <summary>
            Employee context definition
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Database.EmployeeContext.Employee">
            <summary>
            Dbset
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.Database.EmployeeContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            Any extra configuration should be here
            </summary>
            <param name="optionsBuilder"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.Database.EmployeeContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Model rules definition
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Domain.Database.TodoContext">
            <summary>
            TODO context definition
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.Database.TodoContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{Devon4Net.Application.WebAPI.Implementation.Domain.Database.TodoContext})">
            <summary>
            Constructor
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Database.TodoContext.Todos">
            <summary>
            Dbset
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.Database.TodoContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            Any extra configuration should be here
            </summary>
            <param name="optionsBuilder"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.Database.TodoContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Model rules definition
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Employee">
            <summary>
            Entity class for Employee
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Employee.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Employee.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Employee.Surname">
            <summary>
            Surname
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Employee.Mail">
            <summary>
            mail
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos">
            <summary>
            Entity class for Todos
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos.Description">
            <summary>
            Description 
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos.Done">
            <summary>
            Done
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IEmployeeRepository">
            <summary>
            EmployeeRepository interface
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IEmployeeRepository.GetEmployee(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Employee,System.Boolean}})">
            <summary>
            GetEmployee
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IEmployeeRepository.GetEmployeeById(System.Int64)">
            <summary>
            GetEmployeeById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IEmployeeRepository.Create(System.String,System.String,System.String)">
            <summary>
            Create
            </summary>
            <param name="name"></param>
            <param name="surName"></param>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IEmployeeRepository.DeleteEmployeeById(System.Int64)">
            <summary>
            DeleteEmployeeById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.ITodoRepository">
            <summary>
            TodoRepository interface
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.ITodoRepository.GetTodo(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos,System.Boolean}})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.ITodoRepository.GetTodoById(System.Int64)">
            <summary>
            GetTodoById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.ITodoRepository.Create(System.String)">
            <summary>
            Create
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.ITodoRepository.DeleteTodoById(System.Int64)">
            <summary>
            DeleteTodoById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
    </members>
</doc>
